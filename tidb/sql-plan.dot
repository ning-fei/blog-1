digraph sql_plan {
  node[shape=box;];
  newrank=true;
  rankdir=LR;

  execute -> {
    Compile;
  }

  Compile -> {Preprocess, Optimize};
  subgraph cluster_compiler {
    graph[label="executor/compiler.go";fontsize=20;style=rounded]
    Compile[label="Compile\l制定查询计划以及优化"];
  }
  subgraph cluster_plan {
    graph[label="plan";fontsize=20;style=rounded]
    Preprocess[label="Preprocess\l一些合法性检查以及名字绑定"];
    Optimize[label="Optimize\l制定查询计划，并优化"];
    DoOptimize[label="DoOptimize\loptimize a logical plan \lto a physical plan"]
    Optimize -> optimize -> DoOptimize;
    logicalOptimize[label="logicalOptimize\l遍历optRuleList, \l调用相应优化方法"]
    phyicalOptimize[label="phyicalOptimize\l物理优化"]
    DoOptimize -> {
      logicalOptimize;
      phyicalOptimize;
      postOptimize;
    };

      // 基于规则的优化
      rule_optimize[label="rule.optimize\l基于规则的优化"];
      logicalOptimize -> rule_optimize;
      rule_optimize -> {
        columPruner;
        buildKeySolver;
        decorrelateSolver;
        aggregationEliminator;
        projectionEliminator;
        maxMinEliminator;
        ppdSolver;
        outerJoinEliminator;
        partitionProcessor;
        aggregationPushDownSolver;
        pushDownTopNOptimizer;
        joinReOrderSolver;
      };

      findBestTask[label="findBestTask\lconverts the logical plan \lto the physical plan"];

      phyicalOptimize -> {
        recursiveDeriveStats;
        findBestTask;
        plan;
      };

      postOptimize -> {
        eliminatePhysicalProjection;
        injectExtraProjection;
      };
      eliminatePhysicalProjection -> doPhysicalProjectionElimination;

      subgraph cluster_find_best_task {
        graph[label="find_best_task.go";fontsize=20;style=rounded]
        LogicalShow;
        LogicalShowDDLJobs;
        baseLogicalPlan;
        Datasource;
      }

      findBestTask -> {
        LogicalShow;
        LogicalShowDDLJobs;
        baseLogicalPlan;
        Datasource;
      };
  }

}
